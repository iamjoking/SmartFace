/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package faceverificationgui;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.Properties;
import java.util.ResourceBundle;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;

/**
 *
 * @author bsidb
 */
public class SampleGenerationForm extends javax.swing.JFrame {

    
    
     class SampleGenerationConfigure {

        public static final String PINPUTFEATURES = "InputFeatures";
        public static final String POUTPUTDir = "OutputDir";
        public static final String POUTPUTFilename = "OutputFilename";
        public static final String PPositiveNum = "PositiveNum";
        public static final String PNegativeNum = "NegativeNum";
        public static final String PEnableControl = "EnableControl";
        public static final String PProgram = "Program";
        
        private java.util.Properties currentConfigure = new Properties();

        public void set(String key, String value) {
            currentConfigure.setProperty(key, value);
            updateView();
        }

        private String generateCommand() {
            String cmd = "missing properties";
            try{
                cmd = currentConfigure.getProperty(PProgram) + " -i "
                    + currentConfigure.getProperty(PINPUTFEATURES) + " -d "
                    + currentConfigure.getProperty(POUTPUTDir) + " -o "
                    + currentConfigure.getProperty(POUTPUTFilename);
                if(currentConfigure.getProperty(PEnableControl).equals("true")){
                    cmd = cmd + " -s "
                            + currentConfigure.getProperty(PPositiveNum)
                            + ":" + currentConfigure.getProperty(PNegativeNum);
                }
            } catch(Exception e){
                cmd = e.toString();
            }
            return cmd;
        }

        private void updateView() {
            //Call the outside
        }
    }
     
     SampleGenerationConfigure config = new SampleGenerationConfigure();
    
     String generateCommandLineFromGUI(){
         config.set(SampleGenerationConfigure.PProgram, jComboBoxGen.getSelectedItem().toString());
         config.set(SampleGenerationConfigure.PINPUTFEATURES, jTextFieldFeatureFiles.getText());
         config.set(SampleGenerationConfigure.POUTPUTDir,jTextFieldOutputDirectory.getText());
         config.set(SampleGenerationConfigure.POUTPUTFilename, jTextFieldOutputFilename.getText());
         config.set(SampleGenerationConfigure.PEnableControl, new Boolean(jCheckBoxControl.isSelected()).toString());
         config.set(SampleGenerationConfigure.PPositiveNum, jSpinnerPosNum.getValue().toString());
         config.set(SampleGenerationConfigure.PNegativeNum,jSpinnerNegNum.getValue().toString());
         return config.generateCommand();
     }
     
     
    /**
     * Creates new form SampleGenerationForm
     */
    public SampleGenerationForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new JPanel();
        jTextFieldFeatureFiles = new JTextField();
        jButtonInputSelect1 = new JButton();
        jTextFieldOutputDirectory = new JTextField();
        jButtonOutputDirectorySelect = new JButton();
        jTextFieldOutputFilename = new JTextField();
        jComboBoxGen = new JComboBox();
        jButtonGeneratorSelect = new JButton();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        jPanelControl = new JPanel();
        jCheckBoxControl = new JCheckBox();
        jSpinnerPosNum = new JSpinner();
        jSpinnerNegNum = new JSpinner();
        jLabel5 = new JLabel();
        jLabel7 = new JLabel();
        jButtonRun1 = new JButton();
        jLabelState = new JLabel();
        jPanel6 = new JPanel();
        jLabel12 = new JLabel();
        jScrollPane2 = new JScrollPane();
        jTextAreaCL = new JTextArea();
        jButtonGenerate1 = new JButton();
        jButtonRunCLI1 = new JButton();
        jLabel6 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        ResourceBundle bundle = ResourceBundle.getBundle("faceverificationgui/Bundle"); // NOI18N
        jPanel4.setBorder(BorderFactory.createTitledBorder(null, bundle.getString("FeatureExtractionForm.jPanel1.border.title"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Serif", 2, 14))); // NOI18N

        jTextFieldFeatureFiles.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jTextFieldFeatureFilesActionPerformed(evt);
            }
        });
        jTextFieldFeatureFiles.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                jTextFieldFeatureFilesFocusGained(evt);
            }
        });
        jTextFieldFeatureFiles.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                jTextFieldFeatureFilesPropertyChange(evt);
            }
        });

        jButtonInputSelect1.setText(bundle.getString("FeatureExtractionForm.jButtonInputSelect.text")); // NOI18N
        jButtonInputSelect1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jButtonInputSelect1MouseClicked(evt);
            }
        });
        jButtonInputSelect1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonInputSelect1ActionPerformed(evt);
            }
        });

        jTextFieldOutputDirectory.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                jTextFieldOutputDirectoryFocusGained(evt);
            }
        });
        jTextFieldOutputDirectory.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                jTextFieldOutputDirectoryKeyTyped(evt);
            }
        });

        jButtonOutputDirectorySelect.setText(bundle.getString("FeatureExtractionForm.jButtonOutputSelect.text")); // NOI18N
        jButtonOutputDirectorySelect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonOutputDirectorySelectActionPerformed(evt);
            }
        });

        jTextFieldOutputFilename.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                jTextFieldOutputFilenameFocusGained(evt);
            }
        });
        jTextFieldOutputFilename.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                jTextFieldOutputFilenameKeyTyped(evt);
            }
        });

        jComboBoxGen.setEditable(true);
        jComboBoxGen.setModel(new DefaultComboBoxModel(new String[] { "trsGen.exe", "" }));
        jComboBoxGen.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBoxGenActionPerformed(evt);
            }
        });

        jButtonGeneratorSelect.setText(bundle.getString("FeatureExtractionForm.jButtonExtractorSelect.text")); // NOI18N
        jButtonGeneratorSelect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonGeneratorSelectActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("SampleGenerationForm.jLabel1.text")); // NOI18N

        jLabel2.setText(bundle.getString("SampleGenerationForm.jLabel2.text")); // NOI18N

        jLabel3.setText(bundle.getString("SampleGenerationForm.jLabel3.text")); // NOI18N

        jLabel4.setText(bundle.getString("SampleGenerationForm.jLabel4.text")); // NOI18N

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(229, 229, 229)
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING, false)
                    .addComponent(jTextFieldFeatureFiles, GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jTextFieldOutputDirectory)
                    .addComponent(jTextFieldOutputFilename)
                    .addComponent(jComboBoxGen, 0, 1, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(Alignment.TRAILING)
                        .addComponent(jButtonInputSelect1)
                        .addComponent(jButtonOutputDirectorySelect))
                    .addComponent(jButtonGeneratorSelect))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(Alignment.BASELINE)
                        .addComponent(jTextFieldFeatureFiles, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonInputSelect1))
                    .addComponent(jLabel3, Alignment.TRAILING))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jTextFieldOutputDirectory, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOutputDirectorySelect)
                    .addComponent(jLabel1))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldOutputFilename, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxGen, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGeneratorSelect))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelControl.setBorder(BorderFactory.createTitledBorder(null, bundle.getString("FeatureExtractionForm.jPanel2.border.title"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("Serif", 2, 14))); // NOI18N

        jCheckBoxControl.setText(bundle.getString("SampleGenerationForm.jCheckBoxControl.text")); // NOI18N
        jCheckBoxControl.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBoxControlActionPerformed(evt);
            }
        });

        jSpinnerPosNum.setToolTipText(bundle.getString("SampleGenerationForm.jSpinnerPosNum.toolTipText")); // NOI18N

        jLabel5.setText(bundle.getString("SampleGenerationForm.jLabel5.text")); // NOI18N

        jLabel7.setText(bundle.getString("SampleGenerationForm.jLabel7.text")); // NOI18N

        GroupLayout jPanelControlLayout = new GroupLayout(jPanelControl);
        jPanelControl.setLayout(jPanelControlLayout);
        jPanelControlLayout.setHorizontalGroup(
            jPanelControlLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelControlLayout.createSequentialGroup()
                .addGroup(jPanelControlLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jCheckBoxControl)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(147, 147, 147)
                .addGroup(jPanelControlLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jSpinnerNegNum, GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(jSpinnerPosNum, GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addGap(190, 190, 190))
        );
        jPanelControlLayout.setVerticalGroup(
            jPanelControlLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelControlLayout.createSequentialGroup()
                .addComponent(jCheckBoxControl)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanelControlLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerPosNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanelControlLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jSpinnerNegNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jButtonRun1.setText(bundle.getString("FeatureExtractionForm.jButtonRun.text")); // NOI18N
        jButtonRun1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonRun1ActionPerformed(evt);
            }
        });

        jLabelState.setFont(new Font("Sans Serif", 2, 19)); // NOI18N
        jLabelState.setText(bundle.getString("FeatureExtractionForm.jLabelState.text")); // NOI18N
        jLabelState.setVerticalAlignment(SwingConstants.TOP);
        jLabelState.setAutoscrolls(true);
        jLabelState.setFocusable(false);

        jPanel6.setBorder(BorderFactory.createTitledBorder(BorderFactory.createTitledBorder(bundle.getString("FeatureExtractionForm.jPanel3.border.border.title")))); // NOI18N

        jLabel12.setText(bundle.getString("FeatureExtractionForm.jLabel4.text")); // NOI18N

        jTextAreaCL.setColumns(20);
        jTextAreaCL.setLineWrap(true);
        jTextAreaCL.setRows(5);
        jScrollPane2.setViewportView(jTextAreaCL);

        jButtonGenerate1.setText(bundle.getString("FeatureExtractionForm.jButtonGenerate.text")); // NOI18N
        jButtonGenerate1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonGenerate1ActionPerformed(evt);
            }
        });

        jButtonRunCLI1.setText(bundle.getString("FeatureExtractionForm.jButtonRunCLI.text")); // NOI18N
        jButtonRunCLI1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonRunCLI1ActionPerformed(evt);
            }
        });

        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonGenerate1)
                .addGap(18, 18, 18)
                .addComponent(jButtonRunCLI1)
                .addGap(37, 37, 37))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 486, GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jButtonGenerate1)
                    .addComponent(jButtonRunCLI1)))
        );

        jLabel6.setFont(new Font("Sans Serif", 3, 36)); // NOI18N
        jLabel6.setText(bundle.getString("SampleGenerationForm.jLabel6.text")); // NOI18N

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jPanelControl, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabelState, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonRun1)
                .addGap(81, 81, 81))
            .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jPanelControl, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jButtonRun1)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jLabelState, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldFeatureFilesActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jTextFieldFeatureFilesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFeatureFilesActionPerformed

    private void jTextFieldFeatureFilesFocusGained(FocusEvent evt) {//GEN-FIRST:event_jTextFieldFeatureFilesFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFeatureFilesFocusGained

    private void jTextFieldFeatureFilesPropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_jTextFieldFeatureFilesPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFeatureFilesPropertyChange

    private void jButtonInputSelect1MouseClicked(MouseEvent evt) {//GEN-FIRST:event_jButtonInputSelect1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonInputSelect1MouseClicked

    private void jTextFieldOutputDirectoryFocusGained(FocusEvent evt) {//GEN-FIRST:event_jTextFieldOutputDirectoryFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputDirectoryFocusGained

    private void jTextFieldOutputDirectoryKeyTyped(KeyEvent evt) {//GEN-FIRST:event_jTextFieldOutputDirectoryKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputDirectoryKeyTyped

    private void jButtonOutputDirectorySelectActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonOutputDirectorySelectActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        int operation = chooser.showOpenDialog(this);
        if (operation == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            jTextFieldOutputDirectory.setText(file.getPath() + File.separator);
        }
    }//GEN-LAST:event_jButtonOutputDirectorySelectActionPerformed

    private void jButtonRun1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonRun1ActionPerformed
        // TODO add your handling code here:
        RunningCLThread run;
        run = new RunningCLThread(generateCommandLineFromGUI(), jLabelState);
        run.start();
    }//GEN-LAST:event_jButtonRun1ActionPerformed

    private void jButtonGenerate1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonGenerate1ActionPerformed
        // TODO add your handling code here:
        jTextAreaCL.setText(generateCommandLineFromGUI());
    }//GEN-LAST:event_jButtonGenerate1ActionPerformed

    private void jButtonRunCLI1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonRunCLI1ActionPerformed
        // TODO add your handling code here:
        new RunningCLThread(jTextAreaCL.getText(), jLabelState).start();
    }//GEN-LAST:event_jButtonRunCLI1ActionPerformed

    private void jTextFieldOutputFilenameFocusGained(FocusEvent evt) {//GEN-FIRST:event_jTextFieldOutputFilenameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFilenameFocusGained

    private void jTextFieldOutputFilenameKeyTyped(KeyEvent evt) {//GEN-FIRST:event_jTextFieldOutputFilenameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutputFilenameKeyTyped

    private void jCheckBoxControlActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxControlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxControlActionPerformed

    private void jComboBoxGenActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jComboBoxGenActionPerformed
        // TODO add your handling code here:
        config.set(SampleGenerationConfigure.PProgram, jComboBoxGen.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBoxGenActionPerformed

    private void jButtonGeneratorSelectActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonGeneratorSelectActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        int operation = chooser.showOpenDialog(this);
        if (operation == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            //jComboBoxExtractor.addItem(file.toPath());
            jComboBoxGen.setSelectedItem(file.getPath());
        }
    }//GEN-LAST:event_jButtonGeneratorSelectActionPerformed

    private void jButtonInputSelect1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonInputSelect1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        int operation = chooser.showOpenDialog(this);
        if (operation == JFileChooser.APPROVE_OPTION) {
            File[] files = chooser.getSelectedFiles();
            StringBuilder buffer = new StringBuilder();
            for (File file : files) {
                if (buffer.length() != 0) {
                    buffer.append(";");
                }
                buffer.append(file.getPath());
            }
            jTextFieldFeatureFiles.setText(buffer.toString());
        }
    }//GEN-LAST:event_jButtonInputSelect1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SampleGenerationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SampleGenerationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SampleGenerationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SampleGenerationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SampleGenerationForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButtonGenerate1;
    private JButton jButtonGeneratorSelect;
    private JButton jButtonInputSelect1;
    private JButton jButtonOutputDirectorySelect;
    private JButton jButtonRun1;
    private JButton jButtonRunCLI1;
    private JCheckBox jCheckBoxControl;
    private JComboBox jComboBoxGen;
    private JLabel jLabel1;
    private JLabel jLabel12;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabelState;
    private JPanel jPanel4;
    private JPanel jPanel6;
    private JPanel jPanelControl;
    private JScrollPane jScrollPane2;
    private JSpinner jSpinnerNegNum;
    private JSpinner jSpinnerPosNum;
    private JTextArea jTextAreaCL;
    private JTextField jTextFieldFeatureFiles;
    private JTextField jTextFieldOutputDirectory;
    private JTextField jTextFieldOutputFilename;
    // End of variables declaration//GEN-END:variables
}
